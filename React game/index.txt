1.state
    state:바뀔 여지가 있는 부분이 상태(state)이다.
    setState: 상태를 바꾸고 싶을 때 
 
2. jquery 였다면 $('button').text('Liked')와 같이 직접 바꿔줘야한다.

3. JSX와 바벨(babel)
    원시적인 코드에서는 가독성이 안좋았기때문에 JSX로 가독성을 높였다.
    script 코드에서는 jsx (js + xml)문법을 지원하지 않기 때문에 문제가 생김 -> 바벨을 사용


4. setState가 일어나면 render가 다시 실행된다.

5. react hooks (함수)
    this.state = {} 를 [state, setState] = useState()로 변경
    ref -> React.useRef()

6. 웹팩 https://webpack.js.org/concepts/
    설치 과정
    터미널에서 npm init (노드가 설치 되어있어야함)
    (노드는 서버가 아닌 자바스크립트 실행기라고 생각)
    package.json 파일이 생김
    npm i react react-dom를 설치
    npm i -D webpack webpack-cli를 설치 (-D는 개발용으로 웹팩을 사용한다는 뜻)
    webpack.config.js 파일 생성
    client.jsx 파일을 만든다
    (여기 까지 리액트의 기본 설정 방법이다)
    (cra를 사용하면 이것을 한번에 자동화)

    webpack.config.js를 설정해준 다음 터미널에 
    
    webpack 명령어를 설정해준다(package.json)
    npm run dev를 쳐주면 됨

    webpack이 jsx를 인식하지 못함
    바벨(바벨안의 jsx도 설정)을 설정해줘야함

    바벨 설치: npm i -D @babel/core @babel/preset-env @babel/preset-react babel-loader

@babel/preset-env와 plugins
    preset이란 plugins의 모음이다


웹팩 데브 서버와 핫 리로딩
    기존 리로딩햇을 때 기존 데이터가 날아가는데
    핫 리로딩은 그렇지 않다

    핫리로딩하는 패키지 설치
    npm i react-refresh @pmmmwh/react-refresh-webpack-plugin -D
    
    개발용 서버 설치
    npm i -D webpack-dev-server

import와 require 비교
    require는 노드의 모듈 시스템
    moudle.exports를 하면 다른 파일에서 읽어올 수 있다.

    import {} from '' -> {}는 구조 분해 문법
    exports되는게 객체나 배열이면 구조 분해할 수 있다. (default로 export 안한 애들)
    ex)
    export const hello = 'hello'; -> import { hello }
    export default hello;         -> import hello

map
    배열.map((value) => {})
    {['사과', '바나나', '포도'].map((value, index) => {
        return (
            <li>{value}</li>
        )
    })
    출력
    <li>사과</li>
    <li>바나나</li>
    <li>포도</li>

attribute, props
    HTML 태그
    <div value=value><div> : HTML에서 value를 attribute로 불림

    jsx 컴포넌트
    <Try value={value} /> : jsx에서 value를 props로 불림


랜더링 최적화
    state가 바꼈는지 인지

    shouldComponentUpdate(nextProps, nextState, nextContext)

    PureComponent (클래스)

    React.memo (함수)

React.createRef 


props 와 state 연결
    props는 자식에서 바꾸면 안된다(부모에서 바꿔야한다.)

리액트 라이프사이클 소개

    클래스:
    constructor -> render -> ref -> componentDidMount
    -> (setState / props 바뀔때 -> shouldComponentUpdate(true) -> render(리랜더링) -> componentDidUpdate)
    -> 부모가 자식 컴포넌트를 없앴을 때 -> componentWillUnmount -> 소멸

    componentDidMount() {} -> render가 처음 성공적으로 실행됬다면 실행된다.(리랜더링때 x)
    (componentDidMount에(첫랜더링된 후) 비동기 요청을 많이 한다.)

    componentDidUpdate() {} -> 리렌더링 후에 실행

    componentWillUnmount() {} -> 컴포넌트가 제거되기 직전
    (componentWillUnmount도 비동기 요청을 많이 함)


    setInterval은 일정시간동안 반복 작업을 해준다.

    componentDidMount에 setInterval를 설정해줬을때 
    componentWillUnmount에 clear를 해줘야한다
    그렇지 않으면 setInterval은 웹사이트가 종료될때 까지 계속 실행됨
    

class에서는 componentDidMount, componentDidUpdate ... 등으로 라이프사이클을 관리할 수 있지만
hooks에서는 어떻게 할까 -> useEffect

    useEffect(() => { //componentDidMount, componentDidUpdate 역할 (1대1 대은은 아님)
        return () => { // componentWillUnmount 역할

        }
    }, [])


const test = () => {
    
}
-> 이것은 hooks 컴포넌트가 아니라 함수 컴포넌트다
hooks 컴포넌트는 useState, useEffect가 hooks 컴포넌트다


useMemo와 useCallback

    useMemo는 복잡한 함수 결괏값을 기억
    useRef는 일반 값을 기억

    useCallback는 함수 자체를 기억한다.
    자식컴포넌트에 함수를 넘길때는 useCallback를 꼭 써줘야한다.
    왜냐하면 useCallback이 없으면 매번 새로운 함수가 생성되는데
    자식컴포넌트에 props로 매번 새로운 함수를 받으면 매번 랜더링을 해버린다.

Hooks의 자잘한 팁

    useState는 순서를 잘 지켜줘야한다.
    (때문에 최상위에 선언한다.)

useRedcuer (action, dispatch, redcuer)

    state는 우리가 직접 바꿀 수 없다 
    state를 수정하고 싶다면 (이벤트가 실행될때)action를 만들고 이 action을 dispatch 해줘야한다.
    이 action을 어떻게 처리할지는 redcuer가 관리해준다.

    useRedcuer는 비동기적으로 실행된다
    
    useState가 많아 질 경우 useRedcuer를 고려해보는 것이 좋다.

context api

    useRedcuer는 tic~ -> table -> tr -> td로 물려줌
    